tags:
  - name: users
    description: users API
  - name: employees
    description: employees API
  - name: creators
    description: creators API
  - name: sessions
    description: Session API
  - name: agency
    description: agency API

securityDefinitions:
  BearerAuth:
    type: apiKey
    name: Authorization
    in: header

paths:
  # [GET] users
  /users:
    get:
      tags:
        - users
      summary: Find All Users
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

    # [POST] users
    post:
      tags:
        - users
      summary: Add User
      parameters:
        - name: body
          in: body
          description: user Data
          required: true
          schema:
            $ref: '#/definitions/users'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # [GET] users/id
  /users/{id}:
    get:
      tags:
        - users
      summary: Find User By Id
      parameters:
        - name: id
          in: path
          description: User Id
          required: true
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    # [PUT] users/id
    put:
      tags:
        - users
      summary: Update User By Id
      parameters:
        - name: id
          in: path
          description: user Id
          required: true
        - name: body
          in: body
          description: user Data
          required: true
          schema:
            $ref: '#/definitions/users'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    # [DELETE] users/id
    delete:
      tags:
        - users
      summary: Delete User By Id
      parameters:
        - name: id
          in: path
          description: user Id
          required: true
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # [POST] employees
  /employee/{agencyId}:
    post:
      tags:
        - employees
      summary: Add employee to agency Id
      parameters:
        - name: agencyId
          in: path
          description: Agency Id
          required: true
        - name: body
          in: body
          description: employee Data
          required: true
          schema:
            $ref: '#/definitions/employees'
      responses:
        200:
          description: 'OK'
        404:
          description: 'Agency not found'
        409:
          description: 'User already registered'
        500:
          description: 'Something went wrong/Server Error'

  # [GET] Get employees of an agency
  /employees/{agencyId}:
    get:
      tags:
        - employees
      summary: Get all employees of an agency
      parameters:
        - name: agencyId
          in: path
          description: Agency Id
          required: true
      responses:
        200:
          description: 'OK'
        500:
          description: 'Something went wrong/Server Error'

  # [GET] Get employee via the employeeId
  /employee/{employeeId}:
    get:
      tags:
        - employees
      summary: Get specific employee
      parameters:
        - name: employeeId
          in: path
          description: Employee Id
          required: true
      responses:
        200:
          description: 'OK'
        500:
          description: 'Something went wrong/Server Error'

  # [PUT] employees
  /employee/{employeeID}: # using ID - to be unique map.
    put:
      tags:
        - employees
      summary: update employee details
      parameters:
        - name: employeeID
          in: path
          description: employee ID
          required: true
        - name: body
          in: body
          description: employee Data
          required: true
          schema:
            $ref: '#/definitions/employees'
      responses:
        200:
          description: 'OK'
        404:
          description: 'Employee not found'
        500:
          description: 'Something went wrong/Server Error'

  # [DEL] employees
  /employee:
    delete:
      tags:
        - employees
      summary: delete all employees whose ids are provided in body
      parameters:
        - name: employeeIds
          in: body
          description: employeeIds in array
          required: true
          schema:
            type: object
            properties:
              employeeIds:
                type: array
                items:
                  type: string
      responses:
        200:
          description: 'OK'
        404:
          description: 'Employee not found'
        500:
          description: 'Something went wrong/Server Error'

  # [PUT] employees
  /employee/role/{employeeID}: # using ID - to be unique map.
    put:
      tags:
        - employees
      summary: assign employee role
      parameters:
        - name: employeeID
          in: path
          description: employee ID
          required: true
        - name: body
          in: body
          description: Role Data
          required: true
          schema:
            type: object
            properties:
              role:
                type: string
                enum: ['chatter', 'manager', 'admin']
      responses:
        200:
          description: 'OK'
        404:
          description: 'Employee not found'
        500:
          description: 'Something went wrong/Server Error'

  # [GET] get creator Detail by admin
  /creator/getCreatorByAdmin/{creatorId}:
    get:
      tags:
        - creators
      summary: Get Creator Details by Creator ID (Admin)
      parameters:
        - name: creatorId
          in: path
          description: Creator ID
          required: true
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
        '404':
          description: Not Found - Creator Not Found
        '500':
          description: Server Error
  # [GET] get all creator by an admin
  /creators:
    get:
      tags:
        - creators
      summary: Find All Creators
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'
  # [POST] create a new creator
    post:
      tags:
        - creators
      summary: Create a new creator
      parameters:
        - name: body
          in: body
          description: Creator Data
          required: true
          schema:
            $ref: '#/definitions/Creator'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        500:
          description: 'Server Error'

  # [DELETE] delete a creator by ID
  /creators/{id}:
    delete:
      tags:
        - creators
      summary: Delete a creator by ID
      parameters:
        - name: id
          in: path
          description: Creator ID
          required: true
      responses:
        200:
          description: 'OK'
        404:
          description: 'Not Found - Creator Not Found'
        500:
          description: 'Server Error'  
  
  # [POST] sessions client
  /sessions/client/{creatorId}:
    post:
      tags:
        - sessions
      summary: Add client session
      parameters:
        - name: creatorId
          in: path
          description: Creator Id
          required: true
        - name: body
          in: body
          description: session file
          required: true
          schema:
            type: formData
            properties:
              file:
                type: string
                description: session file
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    get:
      tags:
        - sessions
      summary: Get client session
      parameters:
        - name: creatorId
          in: path
          description: Creator Id
          required: true
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # [POST] sessions server
  /sessions/server/{creatorId}:
    post:
      tags:
        - sessions
      summary: Add server session
      parameters:
        - name: creatorId
          in: path
          description: Creator Id
          required: true
        - name: body
          in: body
          description: session credentials
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                description: session email
              password:
                type: string
                description: session password
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [POST] creator/assign-proxy/{creatorId}
  /creators/assign-proxy/{creatorId}:
    post:
      tags:
        - proxy
      summary: Generate a Proxy for a Creator
      parameters:
      - name: creatorId
        in: path
        description: Creator Id
        required: true
      responses:
        '200':
          description: OK
        '404':
          description: Not Found - Creator Not Found
        '500':
          description: Server Error

# [GET] creator/get-proxy/{creatorId}
  /creators/get-proxy/{creatorId}:
    get:
      tags:
      - proxy
      summary: Get Proxy Information by Creator ID
      parameters:
      - name: creatorId
        in: path
        description: Creator ID
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/definitions/Proxy'
        '404':
          description: Not Found
        '409':
          description: Conflict - Proxy doesn't exist
        '500':
          description: Server Error

# [GET] agencies
  /agency:
    get:
      tags:
        - agency
      summary: Find All Agency
      responses:
        '200':
          description: OK
        '500':
          description: Server Error

#[POST] agencies
  /agency/{id}:
    post:
      tags:
        - agency
      summary: Add agency 
      parameters: 
        - name: id
          in: path
          description: user Id
          required: true
        - name: body
          in: body
          description: agency Data
          required: true
          schema:
            $ref: '#/definitions/Agency'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'  
        500:
          description: 'Server Error'

#[patch] agency/:agencyId
  /agency/update-agency/{agencyId}:
    patch:
      tags:
        - agency
      summary: Update agency By Id
      parameters:
        - name: agencyId
          in: path
          description: agency Id
          required: true
        - name: body
          in: body
          description: agency Data
          required: true
          schema:
            $ref: '#/definitions/Agency'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'


# definitions
definitions:
  users:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
        description: user Email
      password:
        type: string
        description: user Password

  employees:
    type: object
    required:
      - employeeEmail
      - employeeName
      - agencyId
    properties:
      employeeEmail:
        type: string
        description: employee Email
      employeeName:
        type: string
        description: employee name
      agencyId:
        type: ObjectID
        description: Agency id
      role:
        type: string
        enum: ['manager', 'admin', 'chatter']
        description: 'employee role'
  Creator:
    type: object
    required:
      - creatorName
      - gender
    properties:
      creatorName:
        type: string
        description: Creator Name
      gender:
        type: string
        enum:
          - Male
          - Female
          - Other
        description: Gender
      internalNotes:
        type: string
        description: Internal Notes
      assignEmployee:
        type: string
        description: Assigned Employee (Employee ID)
      autoRelink:
        type: boolean
        description: Auto Relink

  sessions:
    type: object
    required:
      - creatorId
      - type
      - status
    properties:
      url:
        type: string
        description: session url
      creatorId:
        type: ObjectID
        description: Creator Id
      type:
        type: string
        enum: ['client', 'server']
        description: session type
      status:
        type: string
        enum: ['active', 'inactive']
        description: session status

  Proxy:
    type: object
    required:
      - proxy_id
      - creator
      - proxyAddress
      - port
      - valid
      - username
      - password
    properties:
      proxy_id:
        type: string
        description: Proxy ID
      creator:
        type: string
        format: ObjectId
        description: Creator ID
      proxyAddress:
        type: string
        description: Proxy Address
      port:
        type: integer
        format: int32
        description: Proxy Port
      valid:
        type: boolean
        description: Validity of the Proxy
      username:
        type: string
        description: Proxy Username
      password:
        type: string
        description: Proxy Password
      country:
        type: string
        description: Country
      city:
        type: string
        description: City
      createdAt:
        type: string
        description: Creation Date

  Agency:
    type: object
    required:
      - userId
      - agencyName
      - numberOfCreators
      - websiteUrl
      - socialMediaLink
    properties:
      userId:
        type: ObjectID
        description: User ID associated with the agency
      agencyName:
        type: string
        description: Name of the agency
      numberOfCreators:
        type: integer
        description: Number of creators in the agency
      websiteUrl:
        type: string
        description: Website URL of the agency
      socialMediaLink:
        type: string
        description: Social media link of the agency

schemes:
  - https
  - http
