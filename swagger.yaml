swagger: '2.0'
info:
  title: 'Your API'
  version: '1.0.0'
  description: 'Your API description'
basePath: /
schemes:
  - http
  - https
tags:
  - name: 'users'
    description: 'Users API'
  - name: 'employees'
    description: 'Employees API'
  - name: 'creators'
    description: 'Creators API'
  - name: 'sessions'
    description: 'Session API'
  - name: 'agency'
    description: 'Agency API'
  - name: 'proxy'
    description: 'Proxy API'
  - name: 'invoicing'
    description: 'Invoicing API'
  - name: 'payroll'
    description: 'Payroll API'

securityDefinitions:
  BearerAuth:
    type: apiKey
    name: Authorization
    in: header
paths:

  /users:
    get:
      tags:
        - 'users'
      summary: 'Get a list of users'
      responses:
        200:
          description: 'Successful response'
        500:
          description: 'Server Error'
    post:
      tags:
        - 'users'
      summary: 'Create a new user'
      parameters:
        - name: 'body'
          in: 'body'
          description: 'User Data'
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        201:
          description: 'User created'
        400:
          description: 'Bad request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'
  /users/{id}:
    get:
      tags:
        - 'users'
      summary: 'Find User By ID'
      parameters:
        - name: 'id'
          in: 'path'
          description: 'User ID'
          required: true
      responses:
        200:
          description: 'Successful response'
        404:
          description: 'User not found'
        500:
          description: 'Server Error'
    put:
      tags:
        - 'users'
      summary: 'Update User By ID'
      parameters:
        - name: 'id'
          in: 'path'
          description: 'User ID'
          required: true
        - name: 'body'
          in: 'body'
          description: 'User Data'
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: 'Successful update'
        400:
          description: 'Bad request'
        404:
          description: 'User not found'
        500:
          description: 'Server Error'
    delete:
      tags:
        - 'users'
      summary: 'Delete User By ID'
      parameters:
        - name: 'id'
          in: 'path'
          description: 'User ID'
          required: true
      responses:
        200:
          description: 'User deleted'
        404:
          description: 'User not found'
        500:
          description: 'Server Error'
  /employees/{agencyId}:
    get:
      tags:
        - 'employees'
      summary: 'Get a list of employees of an agency'
      parameters:
        - name: 'agencyId'
          in: 'path'
          description: 'Agency ID'
          required: true
      responses:
        200:
          description: 'Successful response'
        500:
          description: 'Server Error'
          
    post:
      tags:
        - 'employees'
      summary: 'Add an employee to an agency'
      parameters:
        - name: 'agencyId'
          in: 'path'
          description: 'Agency ID'
          required: true
        - name: 'body'
          in: 'body'
          description: 'Employee Data'
          required: true
          schema:
            $ref: '#/definitions/Employee'
      responses:
        201:
          description: 'Employee added'
        400:
          description: 'Bad request'
        404:
          description: 'Agency not found'
        409:
          description: 'User already registered'
        500:
          description: 'Server Error'
  /employees/{employeeId}:
    get:
      tags:
        - 'employees'
      summary: 'Get specific employee'
      parameters:
        - name: 'employeeId'
          in: 'path'
          description: 'Employee ID'
          required: true
      responses:
        200:
          description: 'Successful response'
        404:
          description: 'Employee not found'
        500:
          description: 'Server Error'
    put:
      tags:
        - 'employees'
      summary: 'Update employee details'
      parameters:
        - name: 'employeeId'
          in: 'path'
          description: 'Employee ID'
          required: true
        - name: 'body'
          in: 'body'
          description: 'Employee Data'
          required: true
          schema:
            $ref: '#/definitions/Employee'
      responses:
        200:
          description: 'Successful update'
        400:
          description: 'Bad request'
        404:
          description: 'Employee not found'
        500:
          description: 'Server Error'
    delete:
      tags:
        - 'employees'
      summary: 'Delete an employee by ID'
      parameters:
        - name: 'employeeId'
          in: 'path'
          description: 'Employee ID'
          required: true
      responses:
        200:
          description: 'Employee deleted'
        404:
          description: 'Employee not found'
        500:
          description: 'Server Error'
          # [GET] get creator Detail by admin
  /creator/getCreatorByAdmin/{creatorId}:
    get:
      tags:
        - creators
      summary: Get Creator Details by Creator ID (Admin)
      parameters:
        - name: creatorId
          in: path
          description: Creator ID
          required: true
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
        '404':
          description: Not Found - Creator Not Found
        '500':
          description: Server Error
  # [GET] get all creator by an admin
  /creators:
    get:
      tags:
        - creators
      summary: Find All Creators
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'
  # [POST] create a new creator
    post:
      tags:
        - creators
      summary: Create a new creator
      parameters:
        - name: body
          in: body
          description: Creator Data
          required: true
          schema:
            $ref: '#/definitions/Creator'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        500:
          description: 'Server Error'

  # [DELETE] delete a creator by ID
  /creators/{id}:
    delete:
      tags:
        - creators
      summary: Delete a creator by ID
      parameters:
        - name: id
          in: path
          description: Creator ID
          required: true
      responses:
        200:
          description: 'OK'
        404:
          description: 'Not Found - Creator Not Found'
        500:
          description: 'Server Error'  
  
  # [POST] sessions client
  /sessions/client/{creatorId}:
    post:
      tags:
        - sessions
      summary: Add client session
      parameters:
        - name: creatorId
          in: path
          description: Creator Id
          required: true
        - name: body
          in: body
          description: session file
          required: true
          schema:
            type: formData
            properties:
              file:
                type: string
                description: session file
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    get:
      tags:
        - sessions
      summary: Get client session
      parameters:
        - name: creatorId
          in: path
          description: Creator Id
          required: true
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # [POST] sessions server
  /sessions/server/{creatorId}:
    post:
      tags:
        - sessions
      summary: Add server session
      parameters:
        - name: creatorId
          in: path
          description: Creator Id
          required: true
        - name: body
          in: body
          description: session credentials
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                description: session email
              password:
                type: string
                description: session password
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [POST] creator/assign-proxy/{creatorId}
  /creators/assign-proxy/{creatorId}:
    post:
      tags:
        - proxy
      summary: Generate a Proxy for a Creator
      parameters:
      - name: creatorId
        in: path
        description: Creator Id
        required: true
      responses:
        '200':
          description: OK
        '404':
          description: Not Found - Creator Not Found
        '500':
          description: Server Error

# [GET] creator/get-proxy/{creatorId}
  /creators/get-proxy/{creatorId}:
    get:
      tags:
      - proxy
      summary: Get Proxy Information by Creator ID
      parameters:
      - name: creatorId
        in: path
        description: Creator ID
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/definitions/Proxy'
        '404':
          description: Not Found
        '409':
          description: Conflict - Proxy doesn't exist
        '500':
          description: Server Error
/agency:
  get:
    tags:
      - 'agency'
    summary: 'Find All Agency'
    responses:
      '200':
        description: OK
      '500':
        description: Server Error
  post:
    tags:
      - 'agency'
    summary: 'Add agency'
    parameters:
      - name: 'id'
        in: 'path'
        description: 'user Id'
        required: true
      - name: 'body'
        in: 'body'
        description: 'agency Data'
        required: true
        schema:
          $ref: '#/definitions/Agency'
    responses:
      201:
        description: 'Created'
      400:
        description: 'Bad Request'
      409:
        description: 'Conflict'
      500:
        description: 'Server Error'
/agency/update-agency/{agencyId}:
  patch:
    tags:
      - 'agency'
    summary: 'Update agency By Id'
    parameters:
      - name: 'agencyId'
        in: 'path'
        description: 'agency Id'
        required: true
      - name: 'body'
        in: 'body'
        description: 'agency Data'
        required: true
        schema:
          $ref: '#/definitions/Agency'
    responses:
      200:
        description: 'OK'
      400:
        description: 'Bad Request'
      409:
        description: 'Conflict'
      500:
        description: 'Server Error'
/agency/delete-agency/{agencyId}:
  delete:
    tags:
      - 'agency'
    summary: 'Delete Agency By ID'
    parameters:
      - name: 'agencyId'
        in: 'path'
        description: 'agencyId'
        required: true
    responses:
      200:
        description: 'OK'
      404:
        description: 'Agency Not Found'
      500:
        description: 'Server Error'

/invoicing:
  get:
    tags:
      - 'invoicing'
    summary: 'Get a list of invoicing'
    responses:
      200:
        description: 'Successful response'
      500:
        description: 'Server Error'
  post:
    tags:
      - 'invoicing'
    summary: 'Create a new invoicing'
    parameters:
      - name: 'body'
        in: 'body'
        description: 'Invoicing Data'
        required: true
        schema:
          $ref: '#/definitions/Invoicing'
    responses:
      201:
        description: 'Invoicing created'
      400:
        description: 'Bad request'
      409:
        description: 'Conflict'
      500:
        description: 'Server Error'
/invoicing/{id}:
  get:
    tags:
      - 'invoicing'
    summary: 'Find Invoicing By ID'
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Invoicing ID'
        required: true
    responses:
      200:
        description: 'Successful response'
      404:
        description: 'Invoicing not found'
      500:
        description: 'Server Error'
  put:
    tags:
      - 'invoicing'
    summary: 'Update Invoicing By ID'
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Invoicing ID'
        required: true
      - name: 'body'
        in: 'body'
        description: 'Invoicing Data'
        required: true
        schema:
          $ref: '#/definitions/Invoicing'
    responses:
      200:
        description: 'Successful update'
      400:
        description: 'Bad request'
      404:
        description: 'Invoicing not found'
      500:
        description: 'Server Error'
  delete:
    tags:
      - 'invoicing'
    summary: 'Delete Invoicing By ID'
    parameters:
      - name: 'id'
        in: 'path'
        description: 'Invoicing ID'
        required: true
    responses:
      200:
        description: 'Invoicing deleted'
      404:
        description: 'Invoicing not found'
      500:
        description: 'Server Error'


/payroll:
  get:
    tags:
      - 'payroll'
    summary: 'Get a list of payroll'
    responses:
      200:
        description: 'Successful response'
      500:
        description: 'Server Error'
  post:
    tags:
      - 'payroll'
    summary: 'Create a new payroll'
    parameters:
      - name: 'body'
        in: 'body'
        description: 'payroll Data'
        required: true
        schema:
          $ref: '#/definitions/payroll'
    responses:
      201:
        description: 'payroll created'
      400:
        description: 'Bad request'
      409:
        description: 'Conflict'
      500:
        description: 'Server Error'
/payroll/{id}:
  get:
    tags:
      - 'payroll'
    summary: 'Find payroll By ID'
    parameters:
      - name: 'id'
        in: 'path'
        description: 'payroll ID'
        required: true
    responses:
      200:
        description: 'Successful response'
      404:
        description: 'payroll not found'
      500:
        description: 'Server Error'
  put:
    tags:
      - 'payroll'
    summary: 'Update payroll By ID'
    parameters:
      - name: 'id'
        in: 'path'
        description: 'payroll ID'
        required: true
      - name: 'body'
        in: 'body'
        description: 'payroll Data'
        required: true
        schema:
          $ref: '#/definitions/payroll'
    responses:
      200:
        description: 'Successful update'
      400:
        description: 'Bad request'
      404:
        description: 'payroll not found'
      500:
        description: 'Server Error'
  delete:
    tags:
      - 'payroll'
    summary: 'Delete payroll By ID'
    parameters:
      - name: 'id'
        in: 'path'
        description: 'payroll ID'
        required: true
    responses:
      200:
        description: 'Invoicing deleted'
      404:
        description: 'Invoicing not found'
      500:
        description: 'Server Error'



         
definitions:
  users:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
        description: user Email
      password:
        type: string
        description: user Password

  employees:
    type: object
    required:
      - employeeEmail
      - employeeName
      - agencyId
    properties:
      employeeEmail:
        type: string
        description: employee Email
      employeeName:
        type: string
        description: employee name
      agencyId:
        type: ObjectID
        description: Agency id
      role:
        type: string
        enum: ['manager', 'admin', 'chatter']
        description: 'employee role'
  Creator:
    type: object
    required:
      - creatorName
      - gender
    properties:
      creatorName:
        type: string
        description: Creator Name
      gender:
        type: string
        enum:
          - Male
          - Female
          - Other
        description: Gender
      internalNotes:
        type: string
        description: Internal Notes
      assignEmployee:
        type: string
        description: Assigned Employee (Employee ID)
      autoRelink:
        type: boolean
        description: Auto Relink

  sessions:
    type: object
    required:
      - creatorId
      - type
      - status
    properties:
      url:
        type: string
        description: session url
      creatorId:
        type: ObjectID
        description: Creator Id
      type:
        type: string
        enum: ['client', 'server']
        description: session type
      status:
        type: string
        enum: ['active', 'inactive']
        description: session status

  Proxy:
    type: object
    required:
      - proxy_id
      - creator
      - proxyAddress
      - port
      - valid
      - username
      - password
    properties:
      proxy_id:
        type: string
        description: Proxy ID
      creator:
        type: string
        format: ObjectId
        description: Creator ID
      proxyAddress:
        type: string
        description: Proxy Address
      port:
        type: integer
        format: int32
        description: Proxy Port
      valid:
        type: boolean
        description: Validity of the Proxy
      username:
        type: string
        description: Proxy Username
      password:
        type: string
        description: Proxy Password
      country:
        type: string
        description: Country
      city:
        type: string
        description: City
      createdAt:
        type: string
        description: Creation Date
        

  Agency:
    type: object
    required:
      - userId
      - agencyName
      - numberOfCreators
      - websiteUrl
      - socialMediaLink
    properties:
      userId:
        type: ObjectID
        description: User ID associated with the agency
      agencyName:
        type: string
        description: Name of the agency
      numberOfCreators:
        type: integer
        description: Number of creators in the agency
      websiteUrl:
        type: string
        description: Website URL of the agency
      socialMediaLink:
        type: string
        description: Social media link of the agency
  Invoicing:
    type: 'object'
    properties:
      id:
        type: 'integer'
      userId:
        type: 'string'
      employeeId:
        type: 'string'
      amount:
        type: 'number'
      status:
        type: 'boolean'
      description:
        type: 'string'
    required:
      - userId
      - employeeId
      - amount
      - status
      - description
 
Payroll:
  type: 'object'
  required:
    - userId
    - employeeId
    - amount
    - status
    - description
  properties:
    userId:
      type: 'string'
      description: 'User ID'
    employeeId:
      type: 'string'
      description: 'Employee ID'
    amount:
      type: 'number'
      description: 'Payment amount'
    status:
      type: 'boolean'
      description: 'Status'
    description:
      type: 'string'
      description: 'Description'
